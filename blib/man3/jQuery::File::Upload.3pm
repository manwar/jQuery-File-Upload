.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "jQuery::File::Upload 3"
.TH jQuery::File::Upload 3 "2014-07-15" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
jQuery::File::Upload \- Server\-side solution for the jQuery File Upload <https://github.com/blueimp/jQuery-File-Upload/> plugin.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use jQuery::File::Upload;
\&
\&  #simplest implementation
\&  my $j_fu = jQuery::File::Upload\->new;
\&  $j_fu\->handle_request;
\&  $j_fu\->print_response;
\&
\&  #alternatively you can call $j_fu\->handle_request(1) and this will call print_response for you.
\&  my $j_fu = jQuery::File::Upload\->new;
\&  $j_fu\->handle_request(1);
.Ve
.PP
The above example is the simplest one possible, however it assumes a lot of defaults.
.SS "Assumptions"
.IX Subsection "Assumptions"
.IP "default upload directory" 4
.IX Item "default upload directory"
It is assumed that your files are being uploaded to the current directory of the script that's running, plus '/files'. 
So if your script is in /home/user/public_html, your files will be uploaded to /home/user/public_html/files.
.IP "default url" 4
.IX Item "default url"
It is also assumed that the files will be hosted one directory above the running script, plus '/files'. So if the 
script is located at the url http://www.mydomain.com/upload.cgi, then all files will be assumed to be at the url
http://www.mydomain.com/files/file_name.
.IP "default filename" 4
.IX Item "default filename"
Uploaded files are given a name at run time unless you specifically set the filename in the jQuery::File::Upload object.
.IP "same server upload" 4
.IX Item "same server upload"
By default, jQuery::File::Upload also assumes that you're meaning to have the uploaded file uploaded to the same server
that the script is running on. jQuery::File::Upload also has the ability to \s-1SCP\s0 files to remote servers, but this is not the default.
.IP "\s-1CGI\s0 environment" 4
.IX Item "CGI environment"
By default, jQuery::File::Upload assumes that the script is running in a regular CGI-type environment. However, jQuery::File::Upload
also has the ability to work with Catalyst by being passed the context object.
.IP "all files" 4
.IX Item "all files"
This implementation accepts all types of files.
.SS "A more complicated example"
.IX Subsection "A more complicated example"
.Vb 1
\&  use jQuery::File::Upload;
\&
\&  my $j_fu = jQuery::File::Upload\->new( 
\&                scp => [{
\&                        user => \*(Aquser\*(Aq, #remote user
\&                        public_key => \*(Aq/home/user/.ssh/id_rsa.pub\*(Aq,     #also possible to use password instead of keys
\&                        private_key => \*(Aq/home/user/.ssh/id_rsa\*(Aq,        
\&                        host => \*(Aqmydomain.com\*(Aq, 
\&                        upload_dir => \*(Aq/var/www/html/files\*(Aq, #directory that files will be uploaded to
\&                }],
\&
\&                #user validation specifications
\&                max_file_size => 5242880, #max file size is 5mb
\&                min_file_size => 1,
\&                accept_file_types => [\*(Aqimage/jpeg\*(Aq,\*(Aqimage/png\*(Aq,\*(Aqimage/gif\*(Aq,\*(Aqtext/html\*(Aq], #uploads restricted to these filetypes
\&                max_width => 40000, #max width for images
\&                max_height => 50000, #max height for images
\&                min_width => 1,
\&                min_height => 1,
\&                max_number_of_files => 40, #maximum number of files we can have in our upload directory
\&          );
\&
\&
\&  $j_fu\->handle_request;
\&  $j_fu\->print_response;
.Ve
.SS "Getting fancy"
.IX Subsection "Getting fancy"
.Vb 1
\&  use jQuery::File::Upload;
\&
\&  my $j_fu = jQuery::File::Upload\->new( 
\&                        pre_get => sub { 
\&                                my $j = shift; #jQuery::File::Upload object for current request
\&                                #any code in here will be executed before any get requests are handled
\&                                #jQuery File Upload makes Get request when the page first loads, so this
\&                                #can be useful for prefilling jQuery File Upload with files if you\*(Aqre using
\&                                #jQuery File upload with saved data to view/delete/upload more
\&
\&                                #generate starting files for jQuery File Upload
\&                                $j\->generate_output( 
\&                                        [
\&                                                { 
\&                                                        size => 500000,
\&                                                        filename =>     \*(Aqmy_image.jpeg\*(Aq,
\&                                                        image => \*(Aqy\*(Aq, #need to let jQuery::File::Upload know this is an image
\&                                                                      #or else thumbnails won\*(Aqt be deleted
\&                                                },
\&                                                { 
\&                                                        size => 500000,
\&                                                        filename =>     \*(Aqmy_other_image.jpeg\*(Aq,
\&                                                        image => \*(Aqy\*(Aq, 
\&                                                },
\&                                        ]
\&                                );
\&
\&                                #The above makes assumptions yet again. It generates the url based on the defaults, unless
\&                                #you provide below the upload_url_base.
\&                        },
\&                        pre_delete => sub { 
\&                                my $j = shift;
\&
\&                                #here you can do something with the information in the params of the delete_url
\&                                #you can set your own meaningful delete_params (see below)
\&                                #NOTE: delete_urls always have the \*(Aqfilename\*(Aq param, so that might be enough for your needs
\&                                my $id = param\->(\*(Aqid\*(Aq)
\&
\&                                #DELETE FROM table WHERE id=$id
\&                                #etc.
\&                        },
\&                        post_post => sub { 
\&                                my $j = shift;
\&                                #do some stuff here after post (image is uploaded)
\&                                #possibly save information about image in a database to keep track of it?
\&                                #you can call any methods now to get useful info:
\&
\&                                #INSERT INTO table (name,is_image,width,height) VALUES($j\->filename,$j\->is_image,$j\->final_width,$j\->final_height)
\&                                #etc
\&                        },      
\&                        delete_params => [\*(Aqkey1\*(Aq,\*(Aqval1\*(Aq,\*(Aqkey2\*(Aq,\*(Aqval2\*(Aq], 
\&                                                            #this will add these key value pairs as
\&                                                            #params on the delete_url that is generated
\&                                                            #for each image. This could be useful if you
\&                                                            #kept track of these files in a database and wanted to
\&                                                            #delete them from the database when they are deleted.
\&                                                            #then delete_params could be [\*(Aqid\*(Aq,unique_db_identifier]
\&                                                            #then you could check for the param \*(Aqid\*(Aq in pre_delete
\&                                                            #and delete the file from your DB
\&                );
\&
\&
\&  #N.B. All of the above can also be set with the getter/setter methods
\&
\&  $j_fu\->handle_request(1); #when passed a one, will call print_response for you
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
jQuery::File::Upload makes integrating server-side with the jQuery File Upload <https://github.com/blueimp/jQuery-File-Upload/> plugin simple.
It provides many features, such as:
.IP "1." 4
the ability to \s-1SCP\s0 file uploads to remote servers
.IP "2." 4
the ability to provide your own functions to add to how each request is handled before the request and after the request
.IP "3." 4
options to validate the uploaded files server-side
.IP "4." 4
automatically generates thumbnails if the file is an image
.IP "5." 4
see below for everything you can do with jQuery::File::Upload
.PP
The location of the script should be where jQuery File Upload <https://github.com/blueimp/jQuery-File-Upload/> is
told to upload to.
.SH "METHODS"
.IX Header "METHODS"
.SS "Getters/Setters"
.IX Subsection "Getters/Setters"
\fInew\fR
.IX Subsection "new"
.PP
Any of the below getters/setters can be passed into new as options.
.PP
.Vb 1
\&  my $j_fu = jQuery::File::Upload\->new(option=>val,option2=>val2,...);
.Ve
.PP
\fIupload_dir\fR
.IX Subsection "upload_dir"
.PP
.Vb 1
\&  $j_fu\->upload_dir(\*(Aq/home/user/public_html/files\*(Aq);
.Ve
.PP
Sets the upload directory if saving files locally. Should not end with a slash.
The default is the current directory of the running script with '/files' added to
the end:
.PP
.Vb 1
\&  /home/user/public_html/upload.cgi
.Ve
.PP
yields:
.PP
.Vb 1
\&  /home/user/public_html/files
.Ve
.PP
When using jQuery::File::Upload under normal \s-1CGI\s0, it should have
no problem generating this default upload directory if that's what you want.
However, if you are using Catalyst, depending on how you're running Catalyst
(i.e. mod_perl, fastcgi, etc.) the generated default might be kind of strange.
So if you are using Catalyst and you want to upload to the same server
that jQuery::File::Upload is running on, it's best to just manually set this.
Make sure that the user running your script can write to the directory you
specify.
.PP
\fIthumbnail_upload_dir\fR
.IX Subsection "thumbnail_upload_dir"
.PP
.Vb 1
\&  $j_fu\->thumbnail_upload_dir(\*(Aq/home/user/public_html/files/thumbs\*(Aq);
.Ve
.PP
This can be used to set the upload directory form thumbnails. The default
is upload_dir. If you change this, that will make thumbnails
have a different base url than upload_url_base. Make
sure to change thumbnail_url_base to match this accordingly.
If you would like images and thumbnails to have the same name but just be in
different directories, make sure you set thumbnail_prefix
to ''. This should not end with a slash.
Make sure that the user running your script can write to the directory you
specify.
.PP
\fIupload_url_base\fR
.IX Subsection "upload_url_base"
.PP
.Vb 1
\&  $j_fu\->upload_url_base(\*(Aqhttp://www.mydomain.com/files\*(Aq);
.Ve
.PP
Sets the url base for files. Should not end with a slash.
The default is the current directory of the running script
with '/files' added to the end:
.PP
.Vb 1
\&  http://www.mydomain.com/upload.cgi
.Ve
.PP
yields:
.PP
.Vb 1
\&  http://www.mydomain.com/files
.Ve
.PP
Which means that a file url would look like this:
.PP
.Vb 1
\&  http://www.mydomain.com/files/file.txt
.Ve
.PP
\fIthumbnail_url_base\fR
.IX Subsection "thumbnail_url_base"
.PP
.Vb 1
\&  $j_fu\->thumbnail_url_base(\*(Aqhttp://www.mydomain.com/files/thumbs\*(Aq);
.Ve
.PP
Sets the url base for thumbnails. Should not end with a slash.
The default is upload_url_base.
Resulting thumbnail urls would look like:
.PP
.Vb 1
\&  http://www.mydomain.com/files/thumbs/thumb_image.jpg
.Ve
.PP
However, if thumbnail_relative_url_base
is set, the default will be the current url with the thumbnail 
relative base at the end.
.PP
\fIrelative_url_path\fR
.IX Subsection "relative_url_path"
.PP
.Vb 1
\&  $j_fu\->relative_url_path(\*(Aq/files\*(Aq);
.Ve
.PP
This sets the relative url path for your files relative to the directory
your script is currently running in. For example:
.PP
.Vb 1
\&  http://www.mydomain.com/upload.cgi
.Ve
.PP
yields:
.PP
.Vb 1
\&  http://www.mydomain.com/files
.Ve
.PP
and then all files will go after /files. The default for this is /files,
which is why upload_url_base has the default /files at the end. If
your location for the images is not relative, i.e. it is located
at a different domain, then just set upload_url_base
to get the url_base you want. There should not be 
a slash at the end.
.PP
\fIthumbnail_relative_url_path\fR
.IX Subsection "thumbnail_relative_url_path"
.PP
.Vb 1
\&  $j_fu\->thumbnail_relative_url_path(\*(Aq/files/thumbs\*(Aq);
.Ve
.PP
This sets the thumbnail relative url path for your files relative to the directory
your script is currently running in. For example:
.PP
.Vb 1
\&  http://www.mydomain.com/upload.cgi
.Ve
.PP
yields:
.PP
.Vb 1
\&  http://www.mydomain.com/files/thumbs
.Ve
.PP
and then all thumbnails will go after /files/thumbs. The default for this is nothing,
so then the thumbnail_url will just fall back on whatever the value of 
upload_url_base is.
If your location for thumbnail images is not relative, i.e. it is located
at a different domain, then just set thumbnail_url_base
to get the url_base you want. There should not be 
a slash at the end.
.PP
\fIrelative_to_host\fR
.IX Subsection "relative_to_host"
.PP
.Vb 1
\&  $j_fu\->relative_to_host(1);
.Ve
.PP
If set to 1, this will make relative_url_path and
thumbnail_relative_url_path be relative to
the host of the script url. For example:
.PP
.Vb 1
\&  http://www.mydomain.com/folder/upload.cgi
.Ve
.PP
With a relative_url_path '/files' would yield:
.PP
.Vb 1
\&  http://www.mydomain.com/files
.Ve
.PP
Whereas by default relative_url_path and
thumbnail_relative_url_path are
relative to the folder the upload script is running in.
.PP
If you use this option, make sure to set upload_dir
(and/or thumbnail_upload_dir if necessary)
since jQuery::File::Upload can no longer do a relative path
for saving the file.
.PP
Default is undef.
.PP
\fIfield_name\fR
.IX Subsection "field_name"
.PP
.Vb 1
\&  $j_fu\->field_name(\*(Aqfiles[]\*(Aq);
.Ve
.PP
This is the name of the jQuery File Uploader client side.
The default is files[], as this is the jQuery File Upload
plugin's default.
.PP
\fIctx\fR
.IX Subsection "ctx"
.PP
.Vb 1
\&  $j_fu\->ctx($c);
.Ve
.PP
This is meant to set the Catalyst context object if you are using
this plugin with Catalyst. The default is to not use this.
.PP
\fIcgi\fR
.IX Subsection "cgi"
.PP
.Vb 1
\&  $j_fu\->cgi(CGI\->new);
.Ve
.PP
This should be used mostly internally by jQuery::File::Upload 
(assuming you haven't passed in ctx).
It is just the \s-1CGI\s0 object that the module uses, however if you already
have one you could pass it in.
.PP
\fIshould_delete\fR
.IX Subsection "should_delete"
.PP
.Vb 1
\&  $j_fu\->should_delete(1)
.Ve
.PP
This is used to decide whether to actually delete the files when jQuery::File::Upload
receives a \s-1DELETE\s0 request. The default is to delete, however this could be useful
if you wanted to maybe just mark the field as deleted in your database (using pre_delete) 
and then actually physically
remove it with your own clean up script later. The benefit to this could be that
if you are SCPing the files to a remote server, perhaps issuing the remote commands
to delete these files is something that seems to costly to you.
.PP
\fIscp\fR
.IX Subsection "scp"
.PP
.Vb 8
\&  $j_fu\->scp([{
\&                        host => \*(Aqmedia.mydomain.com\*(Aq,
\&                        user => \*(Aquser\*(Aq,
\&                        public_key => \*(Aq/home/user/.ssh/id_rsa.pub\*(Aq,     
\&                        private_key => \*(Aq/home/user/.ssh/id_rsa\*(Aq,        
\&                        password => \*(Aqpass\*(Aq, #if keys are present, you do not need password
\&                        upload_dir => \*(Aq/my/remote/dir\*(Aq,
\&                }]);
.Ve
.PP
This method takes in an arrayref of hashrefs, where each hashref is a remote host you would like to \s-1SCP\s0 the files to. 
SCPing the uploaded files to remote hosts could be useful if say you hosted your images on a different server
than the one doing the uploading.
.PP
\s-1SCP\s0 \s-1OPTIONS\s0
.IX Subsection "SCP OPTIONS"
.IP "\(bu" 4
host (\s-1REQUIRED\s0) \- the remote host you want to scp the files to, i.e. 127.0.0.1 or media.mydomain.com
.IP "\(bu" 4
user (\s-1REQUIRED\s0) \- used to identify the user to remote server
.IP "\(bu" 4
public_key & private_key \- used to make secure connection. Not needed if password is given.
.IP "\(bu" 4
password \- used along with user to authenticate with remote server. Not needed if keys are supplied.
.IP "\(bu" 4
upload_dir (\s-1REQUIRED\s0) \- the directory you want to scp to on the remote server. Should not end with a slash
.IP "\(bu" 4
thumbnail_upload_dir \- Will default to upload_dir. You only need to provide this if your thumbnails are stored in a different directory than regular images. Should not end with a slash
.PP
You can check Net::SSH2 for more information on connecting to the remote server.
.PP
\fImax_file_size\fR
.IX Subsection "max_file_size"
.PP
.Vb 1
\&  $j_fu\->max_file_size(1024);
.Ve
.PP
Sets the max file size in bytes. By default there is no max file size.
.PP
\fImin_file_size\fR
.IX Subsection "min_file_size"
.PP
.Vb 1
\&  $j_fu\->min_file_size(1);
.Ve
.PP
Sets the minimum file size in bytes. Default minimum is 1 byte. to disable a minimum file size, you can set this to undef or 0.
.PP
\fIaccept_file_types\fR
.IX Subsection "accept_file_types"
.PP
.Vb 1
\&  $j_fu\->accept_file_types([\*(Aqimage/jpeg\*(Aq,\*(Aqimage/png\*(Aq,\*(Aqimage/gif\*(Aq,\*(Aqtext/html\*(Aq]);
.Ve
.PP
Sets what file types are allowed to be uploaded. By default, all file types are allowed. 
File types should be in the format of the Content-Type header sent on requests.
.PP
\fIrequire_image\fR
.IX Subsection "require_image"
.PP
.Vb 1
\&  $j_fu\->require_image(1);
.Ve
.PP
If set to 1, it requires that all uploads must be an image. Setting this is equivalent
to calling:
.PP
.Vb 1
\&  $j_fu\->accept_file_types([\*(Aqimage/jpeg\*(Aq,\*(Aqimage/jpg\*(Aq,\*(Aqimage/png\*(Aq,\*(Aqimage/gif\*(Aq]);
.Ve
.PP
Default is undef.
.PP
\fIdelete_params\fR
.IX Subsection "delete_params"
.PP
.Vb 1
\&  $j_fu\->delete_params([\*(Aqkey1\*(Aq,\*(Aqval1\*(Aq,\*(Aqkey2\*(Aq,\*(Aqval2\*(Aq]);
.Ve
.PP
Sets the keys and values of the params added to the delete_url. 
This can be useful when used with pre_delete,
because if you are keeping track of these files in a database,
you can add unique identifiers to the params so that in pre_delete
you can get these unique identifiers and use them to remove or edit the file
in the databse. By default filename will also be a param unless you
set the delete_url manually.
.PP
\fIdelete_url\fR
.IX Subsection "delete_url"
.PP
.Vb 1
\&  $j_fu\->delete_url(\*(Aqhttp://www.mydomain.com/upload.cgi?filename=file.jpg\*(Aq);
.Ve
.PP
This can be used to set the delete_url that will be requested when
a user deletes a file. However, it is recommended that you do not
set this manually and rather use delete_params
if you want to add your own params to the delete_url.
.PP
\fIthumbnail_width\fR
.IX Subsection "thumbnail_width"
.PP
.Vb 1
\&  $j_fu\->thumbnail_width(80);
.Ve
.PP
This sets the width for the thumbnail that will be created if the
file is an image. Default is 80.
.PP
\fIthumbnail_height\fR
.IX Subsection "thumbnail_height"
.PP
.Vb 1
\&  $j_fu\->thumbnail_height(80);
.Ve
.PP
This sets the height for the thumbnail that will be created if the
file is an image. Default is 80.
.PP
\fIthumbnail_quality\fR
.IX Subsection "thumbnail_quality"
.PP
.Vb 1
\&  $j_fu\->thumbnail_quality(70);
.Ve
.PP
This sets the quality of the thumbnail image. Default is 70 and it
can be on a scale of 0\-100. See Image::Magick for more information.
.PP
\fIthumbnail_format\fR
.IX Subsection "thumbnail_format"
.PP
.Vb 1
\&  $j_fu\->thumbnail_format(\*(Aqjpg\*(Aq);
.Ve
.PP
Sets the format for the generated thumbnail. Can be jpg, png, or gif.
See Image::Magick for more information. Defaults to jpg.
.PP
\fIthumbnail_density\fR
.IX Subsection "thumbnail_density"
.PP
.Vb 1
\&  $j_fu\->thumbnail_density(\*(Aq80x80\*(Aq);
.Ve
.PP
Sets the density for the generated thumbnail. Default is width x height.
See Image::Magick for more information.
.PP
\fIthumbnail_prefix\fR
.IX Subsection "thumbnail_prefix"
.PP
.Vb 1
\&  $j_fu\->thumbnail_prefix(\*(Aqthumb_\*(Aq);
.Ve
.PP
Added before the image filename to create the thumbnail unique filename.
Default is 'thumb_'.
.PP
\fIthumbnail_postfix\fR
.IX Subsection "thumbnail_postfix"
.PP
.Vb 1
\&  $j_fu\->thumbnail_postfix(\*(Aq_thumb\*(Aq);
.Ve
.PP
Added after the image filename to create the thumbnail unique filename.
Default is ''.
.PP
\fIthumbnail_final_width\fR
.IX Subsection "thumbnail_final_width"
.PP
.Vb 1
\&  my $final_width = $j_fu\->thumbnail_final_width;
.Ve
.PP
Because the thumbnails are scaled proportionally, the thumbnail width
may not be what you orignally suggested. This gets you the final width.
.PP
\fIthumbnail_final_height\fR
.IX Subsection "thumbnail_final_height"
.PP
.Vb 1
\&  my $final_height = $j_fu\->thumbnail_final_height;
.Ve
.PP
Because the thumbnails are scaled proportionally, the thumbnail height
may not be what you orignally suggested. This gets you the final height.
.PP
\fIquality\fR
.IX Subsection "quality"
.PP
.Vb 1
\&  $j_fu\->quality(70);
.Ve
.PP
This sets the quality of the uploaded image. Default is 70 and it
can be on a scale of 0\-100. See Image::Magick for more information.
.PP
\fIformat\fR
.IX Subsection "format"
.PP
.Vb 1
\&  $j_fu\->format(\*(Aqjpg\*(Aq);
.Ve
.PP
Sets the format for the generated thumbnail. Can be jpg,png, or gif.
See Image::Magick for more information. Defaults to jpg.
.PP
\fIfinal_width\fR
.IX Subsection "final_width"
.PP
.Vb 1
\&  my $final_width = $j_fu\->final_width;
.Ve
.PP
Returns the final width of the uploaded image.
.PP
\fIfinal_height\fR
.IX Subsection "final_height"
.PP
.Vb 1
\&  my $final_height = $j_fu\->final_height;
.Ve
.PP
Returns the final height of the uploaded image.
.PP
\fImax_width\fR
.IX Subsection "max_width"
.PP
.Vb 1
\&  $j_fu\->max_width(10000);
.Ve
.PP
Sets the maximum width of uploaded images. Will return an error to browser if not
valid. Default is any width.
.PP
\fImax_height\fR
.IX Subsection "max_height"
.PP
.Vb 1
\&  $j_fu\->max_height(10000);
.Ve
.PP
Sets the maximum height of uploaded images. Will return an error to browser if not
valid. Default is any height.
.PP
\fImin_width\fR
.IX Subsection "min_width"
.PP
.Vb 1
\&  $j_fu\->min_width(10000);
.Ve
.PP
Sets the minimum width of uploaded images. Will return an error to browser if not
valid. Default is 1.
.PP
\fImin_height\fR
.IX Subsection "min_height"
.PP
.Vb 1
\&  $j_fu\->min_height(10000);
.Ve
.PP
Sets the minimum height of uploaded images. Will return an error to browser if not
valid. Default is 1.
.PP
\fImax_number_of_files\fR
.IX Subsection "max_number_of_files"
.PP
.Vb 1
\&  $j_fu\->max_number_of_files(20);
.Ve
.PP
Sets the maximum number of files the upload directory can contain. Returns an error
to the browser if number is reached. Default is any number of files. If you have
listed multiple remote directories, the maximum file count out of all of these directories
is what will be used.
.PP
\fIfilename\fR
.IX Subsection "filename"
.PP
.Vb 1
\&  my $filename = $j_fu\->filename;
.Ve
.PP
Returns the resulting filename after processing the request.
.PP
.Vb 1
\&  $j_fu\->filename(\*(Aqmy_name.txt\*(Aq);
.Ve
.PP
You can also set the filename to use for this request before you call
handle_request. However, unless you're sure
that you are going to give the file a unique name, you should
just let jQuery::File::Upload generate the filename. Please note
that if you choose your own filename, you do have to manually set 
thumbnail_filename
.PP
\fIabsolute_filename\fR
.IX Subsection "absolute_filename"
.PP
.Vb 1
\&  my $absolute_filename = $j_fu\->absolute_filename;
.Ve
.PP
Returns the absolute filename of the file on the server.
You can also set this manually if you would like, or jQuery::File::Upload 
will generate it for you.
.PP
\fIthumbnail_filename\fR
.IX Subsection "thumbnail_filename"
.PP
.Vb 1
\&  $j_fu\->filename(\*(Aqmy_name.txt\*(Aq);
.Ve
.PP
You can also set the thumbnail_filename to use for this request before you call
handle_request. However, unless you're sure
that you are going to give the file a unique name, you should
just let jQuery::File::Upload generate the filename.
.PP
\fIabsolute_thumbnail_filename\fR
.IX Subsection "absolute_thumbnail_filename"
.PP
.Vb 1
\&  my $absolute_filename = $j_fu\->absolute_thumbnail_filename;
.Ve
.PP
Returns the absolute filename of the thumbnail image on the server.
You can also set this manually if you would like, or jQuery::File::Upload 
will generate it for you.
.PP
\fIclient_filename\fR
.IX Subsection "client_filename"
.PP
.Vb 1
\&  my $client_filename = $j_fu\->client_filename;
.Ve
.PP
Returns the filename of the file as it was named by the user.
.PP
\fIshow_client_filename\fR
.IX Subsection "show_client_filename"
.PP
.Vb 1
\&  $j_fu\->show_client_filename(1);
.Ve
.PP
This can be used to set whether jQuery::File::Upload shows the user the name
of the file as it looked when they uploaded, or the new name of the file.
When set to true, the user will see the file as it was named on their computer.
The default is true, and this is recommended because typically the user's
filename will look better than the unique one that jQuery::File::Upload generates
for you.
.PP
\fIuse_client_filename\fR
.IX Subsection "use_client_filename"
.PP
.Vb 1
\&  $j_fu\->use_client_filename(0);
.Ve
.PP
If this is set to true, jQuery::File::Upload will use 
the user's name for the file when saving it. However, this
is not recommended because the user could have two files named
the same thing that could overwrite one another, and same scenario
between two different users. It is best to let jQuery::File::Upload
generate the filenames to save with because these are much more
likely to be unique. Another reason not to use client filenames
is that it is possible that they could have invalid characters in them
such as spaces which will prevent a url from loading.
.PP
\fIfilename_salt\fR
.IX Subsection "filename_salt"
.PP
.Vb 1
\&  $j_fu\->filename_salt(\*(Aq_i_love_the_circus\*(Aq);
.Ve
.PP
Anything added here will be appended to the end of the filename.
This is meant to be used if you want to guarantee uniqueness of image
names, i.e. you could use a user id at the end to greatly lessen the chance
of duplicate filenames. Default is nothing.
.PP
\fItmp_dir\fR
.IX Subsection "tmp_dir"
.PP
.Vb 1
\&  $j_fu\->tmp_dir(\*(Aq/tmp\*(Aq);
.Ve
.PP
The provided directory will be used to store temporary files such as images.
Make sure that the user the script is running under has permission to create
and write to files in the tmp_dir. Also, there should be no slash at the end.
Default is /tmp.
.PP
\fIscript_url\fR
.IX Subsection "script_url"
.PP
.Vb 1
\&  $j_fu\->script_url(\*(Aqhttp://www.mydomain.com/upload.cgi\*(Aq);
.Ve
.PP
This can be used to set the url of the script that jQuery::File::Upload is 
running under. jQuery::File::Upload then uses this value to generate
other parts of the output. jQuery::File::Upload in most cases is able
to figure this out on its own, however if you are experiencing issues
with things such as url generation, try setting this manually.
.PP
\fIdata\fR
.IX Subsection "data"
.PP
.Vb 6
\&  $j_fu\->data({
\&            dbh => $dbh,
\&            my_var = $var,
\&            arr = [],
\&            self => $self, #maybe useful for Catalyst
\&        });
.Ve
.PP
This method can be populated with whatever you like. Its purpose is
if you need to get access to other data in one of your
\&\*(L"\s-1PRE/POST\s0 \s-1REQUEST\s0 \s-1METHODS\s0\*(R". This way you
can access any outside data you need by calling data on
the jQuery::File::Upload object that you are passed. However, keep in mind
that if you are using Catalyst, you will have access to the context
object via the jQuery::File::Upload object that is passed in, and this
would be an equally good place to store/retrieve data that you need.
.SS "\s-1JUST\s0 \s-1GETTERS\s0"
.IX Subsection "JUST GETTERS"
\fIoutput\fR
.IX Subsection "output"
.PP
.Vb 1
\&  my $output = $j_fu\->output;
.Ve
.PP
Returns the \s-1JSON\s0 output that will be printed to the browser.
Unless you really feel you need the \s-1JSON\s0, it's usually just easier to
call print_response as this prints out
the header and the \s-1JSON\s0 for you (or alternatively call handle_response
and pass it a 1 so that it will call print_response for you.
.PP
\fIurl\fR
.IX Subsection "url"
.PP
.Vb 1
\&  my $file_url = $j_fu\->url;
.Ve
.PP
This returns the resulting url of the file.
.PP
\fIthumbnail_url\fR
.IX Subsection "thumbnail_url"
.PP
.Vb 1
\&  my $thumbnail_url = $j_fu\->thumbnail_url;
.Ve
.PP
This returns the resulting thumbnail url of the image.
.PP
\fIis_image\fR
.IX Subsection "is_image"
.PP
.Vb 1
\&  my $is_image = $j_fu\->is_image;
.Ve
.PP
Returns whether or not the uploaded file was an image.
This should be called after handle_request or in
post_post.
.PP
\fIsize\fR
.IX Subsection "size"
.PP
.Vb 1
\&  my $size = $j_fu\->size;
.Ve
.PP
Returns the size of the uploaded file.
This should be called after handle_request or in
post_post.
.SS "\s-1OTHER\s0 \s-1METHODS\s0"
.IX Subsection "OTHER METHODS"
\fIprint_response\fR
.IX Subsection "print_response"
.PP
.Vb 1
\&  $j_fu\->print_response;
.Ve
.PP
Should be called after handle_request.
Prints out header and \s-1JSON\s0 back to browser. Called for
convenience by handle_request if 
handle_request is passed a 1.
.PP
\fIhandle_request\fR
.IX Subsection "handle_request"
.PP
.Vb 1
\&  $j_fu\->handle_request;
.Ve
.PP
Called to handle one of '\s-1GET\s0','\s-1POST\s0', or '\s-1DELETE\s0' requests.
If passed a 1, will also call print_response
after it's finished.
.PP
\fIgenerate_output\fR
.IX Subsection "generate_output"
.PP
.Vb 5
\&  $j_fu\->generate_output([{
\&                        image => \*(Aqy\*(Aq, #or \*(Aqn\*(Aq     
\&                        filename => \*(Aqmy_cool_pic.jpg\*(Aq,
\&                        size => 1024,
\&                  }]);
.Ve
.PP
This should be used in conjuction with pre_get
to populate jQuery File Upload with files on page load. It takes in
an arrayref of hashrefs, where each hashref is a file. After this
method is called, you will need to call print_response
or handle_request with a 1 to print out the \s-1JSON\s0.
.PP
\s-1GENERATE_OUTPUT\s0 \s-1OPTIONS\s0
.IX Subsection "GENERATE_OUTPUT OPTIONS"
.IP "\(bu" 4
filename (\s-1REQUIRED\s0) \- name of the file
.IP "\(bu" 4
size (\s-1REQUIRED\s0) \- size in bytes
.IP "\(bu" 4
image \- 'y' or 'n'. Necessary if file is image and you would like thumbnail to be deleted with file. Also, needed if you want thumbnail to be displayed by jQuery File Upload
.IP "\(bu" 4
name \- name that will be displayed to client as the filename. If not provided, defaults to filename. Can be
used well with client_filename to make filename's look prettier client-side.
.IP "\(bu" 4
thumbnail_filename \- filename for thumbnail. jQuery::File::Upload will generate the thumbnail_filename based
on the filename and other factors (such as upload_url_base) if you don't set this.
.IP "\(bu" 4
url \- url used for file. If not provided, will be generated with filename and other defaults.
.IP "\(bu" 4
thumbnail_url \- url used for thumbnail. If not provided, will be generated with other defaults.
.IP "\(bu" 4
delete_url \- url that will be called by jQuery File Upload <https://github.com/blueimp/jQuery-File-Upload/> to
delete the file. It's better to just let jQuery::File::Upload generate this and use delete_params
if you want to set your own parameters for the delete url.
.IP "\(bu" 4
delete_params \- The format of this is just like delete_params. It takes [key,value] pairs. 
Any values here will be added in addition to any global delete_params that you set.
.IP "\(bu" 4
error \- can be used to supply an error for a file (although I don't really know why you would use this...)
.PP
Note that jQuery::File::Upload will generate urls and such
based upon things given here (like filename) and other
options such as upload_url_base.
.SS "\s-1PRE/POST\s0 \s-1REQUEST\s0 \s-1METHODS\s0"
.IX Subsection "PRE/POST REQUEST METHODS"
N.B. The following functions are all passed a jQuery::File::Upload object. And they
can be passed into new as options.
.PP
Also, note that since all of these user-defined methods are passed the jQuery::File::Upload object,
if you are using Catalyst you can just call the ctx method to get anything
stored via your context object. For Catalyst users, this makes this a practical (and possibly better)
alternative to the provided data method.
.PP
\fIpre_delete\fR
.IX Subsection "pre_delete"
.PP
.Vb 1
\&  $j_fu\->pre_delete(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->pre_delete(\e&mysub);
.Ve
.PP
pre_delete will be called before a delete request is handled.
This can be useful if you want to mark a file as deleted in your
database. Also, you can use this along with delete_params
to set unique identifiers (such as an id for the file or the primary key) so that you can
find the file in your database easier to perform whatever operations
you want to on it. \fBNote:\fR This will be called even if
should_delete is set to false.
If your pre_delete returns a value, this will be interpreted as an error
message and the delete call will be terminated and will return the error.
For example:
.PP
.Vb 3
\&  $j_fu\->pre_delete(sub { 
\&    return \*(AqYou cannot delete this file.\*(Aq; #file will not be deleted
\&  });
.Ve
.PP
\fIpost_delete\fR
.IX Subsection "post_delete"
.PP
.Vb 1
\&  $j_fu\->post_delete(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->post_delete(\e&mysub);
.Ve
.PP
post_delete will be called after a delete request is handled.
\&\fBNote:\fR This will not be called if 
should_delete is set to false.
.PP
\fIpre_post\fR
.IX Subsection "pre_post"
.PP
.Vb 1
\&  $j_fu\->pre_post(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->pre_post(\e&mysub);
.Ve
.PP
pre_post will be called before a post request is handled.
\&\s-1POST\s0 requests are what happen when jQuery File Upload uploads your file.
If your pre_post returns a value, this will be interpreted as an error
message and the post call will be terminated and will return the error.
For example:
.PP
.Vb 3
\&  $j_fu\->pre_post(sub { 
\&    return \*(AqYou have too many files.\*(Aq; #file will not be uploaded
\&  });
.Ve
.PP
\fIpost_post\fR
.IX Subsection "post_post"
.PP
.Vb 1
\&  $j_fu\->post_post(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->post_post(\e&mysub);
.Ve
.PP
post_post will be called after a post request is handled.
This can be useful if you want to keep track of the file
that was just uploaded by recording it in a database.
You can use the jQuery::File::Upload object that
is passed in to get information about the file that you would like
to store in the databse. Later on you can use this stored
information about the files to prepopulate a jQuery File Upload
form with files you already have by preloading the form by using
pre_get.
.PP
\fIpre_get\fR
.IX Subsection "pre_get"
.PP
.Vb 1
\&  $j_fu\->pre_get(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->pre_get(\e&mysub);
.Ve
.PP
pre_get will be called before a get request is handled.
Get requests happen on page load to see if there are any
files to prepopulate the form with. This method can
be useful to prepopulate the jQuery File Upload form
by combining saved information about the files you want to
load and using generate_output to
prepare the output that you would like to send to the
jQuery File Upload form.
.PP
\fIpost_get\fR
.IX Subsection "post_get"
.PP
.Vb 1
\&  $j_fu\->post_get(sub { my $j_fu = shift });
.Ve
.PP
or
.PP
.Vb 1
\&  $j_fu\->post_get(\e&mysub);
.Ve
.PP
post_get will be called after a get request is handled.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "Catalyst Performance \- Persistent jQuery::File::Upload"
.IX Header "Catalyst Performance - Persistent jQuery::File::Upload"
A jQuery::File::Upload object shouldn't be too expensive to create, however
if you'd like to only create the object once you could create it as an
Moose attribute to the class:
.PP
.Vb 3
\&  use jQuery::File::Upload;
\&  has \*(Aqj_uf\*(Aq => (isa => \*(AqjQuery::File::Upload\*(Aq, is => \*(Aqrw\*(Aq,
\&                  lazy => 0, default => sub { jQuery::File::Upload\->new } );
.Ve
.PP
However, if you do this it is possible that you could run into issues
with values of the jQuery::File::Upload object that were not cleared
messing with the current request. The _clear method is called before
every handle_request which clears the values of
the jQuery::File::Upload object, but it's possible I may have
missed something.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
\&\s-1CGI\s0
.IP "\(bu" 4
\&\s-1JSON::XS\s0
.IP "\(bu" 4
Net::SSH2
.IP "\(bu" 4
Net::SSH2::SFTP
.IP "\(bu" 4
Image::Magick
.IP "\(bu" 4
Cwd
.IP "\(bu" 4
Digest::MD5
.IP "\(bu" 4
\&\s-1URI\s0
.IP "\(bu" 4
jQuery File Upload <https://github.com/blueimp/jQuery-File-Upload/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Hopkins, <srchulo@cpan.org>
.SH "Bugs"
.IX Header "Bugs"
I haven't tested this too thoroughly beyond my needs, so it is possible
that I have missed something. If I have, please feel free to submit a bug
to the bug tracker, and you can send me an email letting me know that you
submitted a bug if you want me to see it sooner :)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2013 by Adam Hopkins
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
